/*
 * Copyright 2015-2022 Ritense BV, the Netherlands.
 *
 * Licensed under EUPL, Version 1.2 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import io.mateo.cxf.codegen.wsdl2java.Wsdl2Java

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-release" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

plugins {
    id "idea"

    id "org.springframework.boot" version "${springVersion}"
    id "io.spring.dependency-management" version "${springDependencyManagementVersion}"

    id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.spring" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.allopen" version "${kotlinVersion}"
    id "com.avast.gradle.docker-compose" version "0.16.9"

    // CFX
    id "io.mateo.cxf-codegen" version "1.2.1"
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
    maven { url "https://oss.sonatype.org/content/repositories/releases" }
    maven { url "https://s01.oss.sonatype.org/content/groups/staging/" }
    maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    implementation "com.ritense.valtimo:contract:${valtimoVersion}"
    implementation "com.ritense.valtimo:core:${valtimoVersion}"
    implementation "com.ritense.valtimo:plugin-valtimo:${valtimoVersion}"
    implementation "com.ritense.valtimo:value-resolver:${valtimoVersion}"
    implementation "com.ritense.valtimo:document:${valtimoVersion}"

    implementation "org.springframework.boot:spring-boot-starter-webflux:${springVersion}"

    implementation "io.github.microutils:kotlin-logging:3.0.5"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.14.2"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.14.2"
    implementation "com.fasterxml.jackson.core:jackson-core:2.14.2"

    // Apache deps
    implementation "org.apache.httpcomponents:httpclient:4.5.14"
    implementation 'org.apache.httpcomponents:httpcore:4.4.15'

    implementation 'com.auth0:java-jwt:4.4.0'

    // Testing
    testImplementation "com.fasterxml.jackson.core:jackson-databind:2.14.2"
    testImplementation "com.fasterxml.jackson.core:jackson-annotations:2.14.2"
    testImplementation "com.fasterxml.jackson.core:jackson-core:2.14.2"
    testImplementation "org.junit.jupiter:junit-jupiter-migrationsupport:5.9.1"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.hamcrest:hamcrest-library"
    testImplementation "com.jayway.jsonpath:json-path:2.7.0"
    testImplementation "org.mockito.kotlin:mockito-kotlin:4.1.0"


    testImplementation "com.squareup.okhttp3:mockwebserver:4.10.0"
    testImplementation "com.squareup.okhttp3:okhttp:4.10.0"

    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5"

    // SOAP Libraries
    implementation "javax.xml.ws:jaxws-api:2.3.1"
    cxfCodegen "jakarta.xml.ws:jakarta.xml.ws-api:2.3.3"
    cxfCodegen "jakarta.annotation:jakarta.annotation-api:1.3.5"
    implementation "org.apache.cxf:cxf-rt-frontend-jaxws:3.5.3"
    implementation "org.apache.cxf:cxf-rt-transports-http:3.5.5"
    implementation "com.sun.xml.ws:jaxws-ri:2.3.3"

}

tasks.register("integrationTesting", Test) {
    group = "verification"
    useJUnitPlatform {
        includeTags "integration"
    }
    mustRunAfter check
}

dockerCompose {
    projectName = "suwinet"
    isRequiredBy(integrationTesting)
    useComposeFiles.addAll("docker-compose-integration-test.yml")
}

test {
    useJUnitPlatform()
}

tasks.register('genBRPDossierPersoonGSD', Wsdl2Java) {
    toolOptions {
        wsdl.set(file("src/main/resources/soap/suwinet/Diensten/BRPDossierPersoonGSD/v0200-b02/Impl/BKWI.wsdl"))
        outputDir.set(layout.buildDirectory.dir("generated-sources/cxf").get().asFile)
        markGenerated.set(true)
        packageNames.set(['com.ritense.valtimo.implementation.dkd.BRPDossierPersoonGSD'])
        extendedSoapHeaders.set(true)
    }
    allJvmArgs = ['-Duser.language=en', '-Duser.country=NL']
}

tasks.named("compileKotlin") {
    dependsOn(
            "genBRPDossierPersoonGSD",
    )
}

sourceCompatibility = 17
targetCompatibility = 17

apply plugin: "com.avast.gradle.docker-compose"

apply from: "gradle/publishing.gradle"
